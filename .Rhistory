library(AppliedPredictiveModeling)
install.packages(c("AppliedPredictiveModeling", "caret", "AlzheimerDisease"))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(testing)
qplot(CompressiveStrength,colour=education,data=training)
qplot(CompressiveStrength,colour=training,data=training)
qplot(CompressiveStrength,data=training)
qplot(CompressiveStrength,colour=training[],data=training)
qplot(CompressiveStrength,FlyAsh,colour=FlyAsh,data=training)
qplot(CompressiveStrength,Age,colour=Age,data=training)
qplot(CompressiveStrength,FlyAsh,colour=FlyAsh,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,Superplasticizer,data=training)
qplot(Superplasticizer,data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
testing[IL%]
testing["IL%"]
newtraining = training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7","IL_8")]
prComp <- prcomp(newtraining)
prComp
prComp$rotation
output <- preProcess(training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7","IL_8")], method="pca", pcaComp=2)
output
train <- predict(output,training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7","IL_8")]
)
)
train <- predict(output,training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3", "IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7","IL_8")]
)
train
modelFit <- train(training$type ~ ., method="glm",data=train)
install.packages("devtools")
library(devtools)
library(devtools)
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
setwd("~/anz")
author("deck")
library(slidify)
author("deck")
